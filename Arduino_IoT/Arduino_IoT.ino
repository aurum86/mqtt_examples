/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
https://create.arduino.cc/cloud/things/8658a610-21f8-4f6b-8c14-fcbe037ba9f9
 
  Arduino IoT Cloud Variables description
 
  The following variables are automatically generated and updated when changes are made to the Thing
 
  float temperature;
 
  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/
 
#include "thingProperties.h"
#include <SPI.h>
#include <WiFiNINA.h>
#include <PubSubClient.h>
#include <Arduino_MKRIoTCarrier.h>
// #include "certs.h"
  
MKRIoTCarrier carrier;
WiFiClient net;
PubSubClient client(net);

void connectToWiFi() {
  clearScreen();
  carrier.display.print("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    WiFi.begin(SSID, PASS);
    delay(2000);
    carrier.display.print(".");
  }
  carrier.display.println("\nWiFi connected");
}

void connectToAWS() {
  // Setup TLS credentials
  // net.setCACert(AWS_CA_ROOT);
  // net.setCertificate(AWS_CERT);
  // net.setPrivateKey(AWS_PRIVATE_KEY);

  client.setServer(remote_endpoint, remote_port);

  while (!client.connected()) {
    clearScreen();
    carrier.display.print("Connecting to AWS MQTT...");
    if (client.connect("Arduino_IoT_Client")) {
      carrier.display.println("connected!");
    } else {
      carrier.display.print("failed, rc=");
      carrier.display.print(client.state());
      delay(2000);
    }
  }
}

void clearScreen() {
  carrier.display.fillScreen(0x0000);
  carrier.display.setCursor(60, 80);
}

void setup() {
  Serial.begin(9600);
  delay(1500);
  
  carrier.begin();
  carrier.display.setTextSize(3);

  clearScreen();
  carrier.display.print("Booting...");

  connectToWiFi();
  connectToAWS();

  delay(1000);
}

void loop() {
  if (!client.connected()) {
    connectToAWS();
  }
  client.loop();

  temperature = carrier.Env.readTemperature();

  String payload = String("{\"temperature\":") + temperature + "}";
  client.publish(mqtt_topic, payload.c_str());

  Serial.print("Temperature(C): ");
  Serial.println(temperature);

  clearScreen();
  carrier.display.print(String(temperature));

  delay(1000);
}
/*
  Since Temperature is READ_WRITE variable, onTemperatureChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTemperatureChange()  {
  // Add your code here to act upon Temperature change
}